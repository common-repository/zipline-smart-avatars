{"version":3,"sources":["admin.js"],"names":["$","gallery","confirmModal","concat","attr","closeConfirmModal","remove","css","overflow","height","prop","on","length","contents","appendTo","find","val","html","proEnabled","zl_smart_avatars","pro_enabled","overlay","notice","this","index","wrapAll","before","removeClass","addClass","replaceWith","jQuery"],"mappings":"aAAE,CAAA,SAAUA,GAKR,IAAIC,EAAUD,EAAG,uCAAwC,EAMnDE,EAAeF,EAAC,wCAAAG,OAHN,wDAGuD,6BAAA,EAAAA,OAF5D,8EAE4F,GAAA,EAAAA,OADxF,mEACkG,uBAAA,CAAwB,EAAEC,KAAM,KAAM,eAAgB,EAyCvK,SAASC,IACLL,EAAG,gBAAiB,EAAEM,OAAO,EAC7BN,EAAG,YAAa,EAAEO,IAAI,CAClBC,SAAU,SACVC,OAAQ,MACZ,CAAC,CACL,CA5CAT,EAAG,gBAAiB,EAAEU,KAAM,WAAY,CAAA,CAAK,EAAEC,GAAI,QAAS,WAGnDX,EAAG,gBAAiB,EAAEU,KAAM,WAAY,CAAA,CAAK,GAAK,IAAMV,EAAG,gBAAiB,EAAEY,QAAU,IAAMZ,EAAG,aAAc,EAAEa,SAAS,EAAED,SAC7HV,EAAaY,SAAU,MAAO,EAEzB,IAAMd,EAAG,gBAAiB,EAAEY,QAC7BZ,EAAG,YAAa,EAAEO,IAAI,CAClBC,SAAU,SACVC,OAAQ,MACZ,CAAC,EAGLT,EAAG,mBAAoB,EAAEW,GAAI,QAAS,WAa1CV,EAAQc,KAAM,iBAAkB,EAAEC,IAAK,EAAG,EAG1Cf,EAAQc,KAAM,aAAc,EAAEE,KAAM,EAAG,EAGvCjB,EAAG,yBAA0B,EAAEO,IAAK,UAAW,OAAQ,EACvDP,EAAG,kBAAmB,EAAEO,IAAK,UAAW,OAAQ,EAEhDF,EAAkB,CApBd,CAAC,EAEDL,EAAG,uBAAwB,EAAEW,GAAI,QAAS,WACtCN,EAAkB,CACtB,CAAC,EAET,CAAC,EA6BD,IAAMa,EAAaC,iBAAiBC,YAEpCpB,EAAG,4BAA6B,EAAEW,GAAI,QAAS,WAE3C,IAMcU,EACAC,EAPPJ,IAKE,EAFwC,EAAzBlB,EAAG,UAAW,EAAEY,SAES,GAArBZ,EAAGuB,IAAK,EAAEC,MAAM,GAAUxB,EAAGuB,IAAK,EAAEC,MAAM,EAAI,IAC5DH,EAAUrB,EAAG,6BAA8B,EAC3CsB,EAAStB,EACX,4OAKJ,EAGAA,EAAG,aAAc,EAAEa,SAAS,EAAEY,QAASJ,CAAQ,EAC/CrB,EAAG,UAAW,EAAE0B,OAAQJ,CAAO,GAEnCtB,EAAG,UAAW,EAAE2B,YAAa,mBAAoB,EAGzD,CAAC,EAED3B,EAAG,kCAAmC,EAAEW,GAAI,QAAS,WAGjD,IAOUE,EAPmC,EAAzBb,EAAG,UAAW,EAAEY,SAEbZ,EAAG,6BAA8B,EAGpDA,EAAG,UAAW,EAAE4B,SAAU,mBAAoB,EAC9C5B,EAAG,SAAU,EAAEM,OAAO,EAChBO,EAAWb,EAAG,UAAW,EAAEa,SAAS,EAC1Cb,EAAG,UAAW,EAAE6B,YAAahB,CAAS,EAE9C,CAAC,CACJ,EAAEiB,MAAO","file":"admin.min.js","sourcesContent":["( function( $ ) {\n\n    /**\n     * AVATARS FUNCTIONALITY\n     */\n    let gallery = $( '#zipline_smart_avatars-create-gallery' );\n\n    // Confirm modal HTML\n    const message = '<h2>Are you sure you want to clear your gallery?</h2>';\n    const ok = '<button id=\"clear-gallery-ok\" class=\"button-primary\">Clear Gallery</button>';\n    const cancel = '<button id=\"clear-gallery-cancel\" class=\"button\">Cancel</button>';\n    const confirmModal = $( `<div> <div id=\"confirm-modal-inner\"> ${message} <div class=\"button-wrap\"> ${ok} ${cancel} </div> </div> </div>` ).attr( 'id', 'confirm-modal' );\n\n    // Disable the (redux) clear gallery button when clicked\n    $( '#clear-gallery' ).prop( 'disabled', true ).on( 'click', function() {\n\n        // If the button is disabled, modal is not showing and no avatars have been added then output modal\n        if ( $( '#clear-gallery' ).prop( 'disabled', true ) && 0 === $( '#confirm-modal' ).length && 0 !== $( '.screenshot' ).contents().length ) {\n            confirmModal.appendTo( 'body' );\n\n            if ( 0 !== $( '#confirm-modal' ).length ) {\n                $( 'html, body' ).css({\n                    overflow: 'hidden',\n                    height: '100%'\n                });\n            }\n\n            $( '#clear-gallery-ok' ).on( 'click', function() {\n                closeConfirmModalAndClearAvatars();\n            });\n\n            $( '#clear-gallery-cancel' ).on( 'click', function() {\n                closeConfirmModal();\n            });\n        }\n    });\n\n    function closeConfirmModalAndClearAvatars() {\n\n        // Remove value from input.\n        gallery.find( '.gallery_values' ).val( '' );\n\n        // Remove preview images.\n        gallery.find( '.screenshot' ).html( '' );\n\n        // Display save notice\n        $( '.redux_notification_bar' ).css( 'display', 'block' );\n        $( '.redux-save-warn' ).css( 'display', 'block' );\n\n        closeConfirmModal();\n    }\n\n    function closeConfirmModal() {\n        $( '#confirm-modal' ).remove();\n        $( 'html, body' ).css({\n            overflow: 'scroll',\n            height: 'auto'\n        });\n    }\n\n    /**\n     * OVERLAYS ON SETTINGS PAGES WHEN PRO VERSION NOT ACTIVE\n     */\n    // Check if the pro version is active\n    const proEnabled = zl_smart_avatars.pro_enabled;\n\n    $( '.redux-group-menu li:gt(0)' ).on( 'click', function() {\n\n        if ( ! proEnabled ) {\n\n            // Check if the overlay exists\n            let overlayExists = $( '.overlay' ).length > 0;\n\n            if ( ! overlayExists && $( this ).index() >= 1 && $( this ).index() < 5 ) {\n                const overlay = $( '<div class=\"overlay\"></div>' );\n                const notice = $(\n                    '<div class=\"notice\">' +\n                    '<h3>These options are only available with Smart Avatars Pro add on. To download please visit ' +\n                    '<a href=\"https://my.ziplinecommunities.com/product/smart-avatars-pro/\" target=\"_blank\">Zipline Communities</a>' +\n                    '</h3>' +\n                    '</div>'\n                );\n\n                // Wrap the overlay around the settings page\n                $( '.redux-main' ).contents().wrapAll( overlay );\n                $( '.overlay' ).before( notice );\n            }\n            $( '.overlay' ).removeClass( 'allow-interaction' );\n        }\n\n    });\n\n    $( '.redux-group-menu li:first-child' ).on( 'click', function() {\n\n        // Check if the overlay exists\n        let overlayExists = $( '.overlay' ).length > 0;\n        if ( overlayExists ) {\n            const overlayDiv = $( '<div class=\"overlay\"></div>' );\n\n            // Wrap the overlay around the settings page\n            $( '.overlay' ).addClass( 'allow-interaction' );\n            $( '.notice' ).remove();\n            const contents = $( '.overlay' ).contents();\n            $( '.overlay' ).replaceWith( contents );\n        }\n    });\n}( jQuery ) );\n"]}